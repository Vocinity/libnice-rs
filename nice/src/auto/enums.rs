// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceCandidateTransport")]
pub enum CandidateTransport {
    #[doc(alias = "NICE_CANDIDATE_TRANSPORT_UDP")]
    Udp,
    #[doc(alias = "NICE_CANDIDATE_TRANSPORT_TCP_ACTIVE")]
    TcpActive,
    #[doc(alias = "NICE_CANDIDATE_TRANSPORT_TCP_PASSIVE")]
    TcpPassive,
    #[doc(alias = "NICE_CANDIDATE_TRANSPORT_TCP_SO")]
    TcpSo,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CandidateTransport {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CandidateTransport::{}",
            match *self {
                Self::Udp => "Udp",
                Self::TcpActive => "TcpActive",
                Self::TcpPassive => "TcpPassive",
                Self::TcpSo => "TcpSo",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for CandidateTransport {
    type GlibType = ffi::NiceCandidateTransport;

    fn into_glib(self) -> ffi::NiceCandidateTransport {
        match self {
            Self::Udp => ffi::NICE_CANDIDATE_TRANSPORT_UDP,
            Self::TcpActive => ffi::NICE_CANDIDATE_TRANSPORT_TCP_ACTIVE,
            Self::TcpPassive => ffi::NICE_CANDIDATE_TRANSPORT_TCP_PASSIVE,
            Self::TcpSo => ffi::NICE_CANDIDATE_TRANSPORT_TCP_SO,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceCandidateTransport> for CandidateTransport {
    unsafe fn from_glib(value: ffi::NiceCandidateTransport) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Udp,
            1 => Self::TcpActive,
            2 => Self::TcpPassive,
            3 => Self::TcpSo,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceCandidateType")]
pub enum CandidateType {
    #[doc(alias = "NICE_CANDIDATE_TYPE_HOST")]
    Host,
    #[doc(alias = "NICE_CANDIDATE_TYPE_SERVER_REFLEXIVE")]
    ServerReflexive,
    #[doc(alias = "NICE_CANDIDATE_TYPE_PEER_REFLEXIVE")]
    PeerReflexive,
    #[doc(alias = "NICE_CANDIDATE_TYPE_RELAYED")]
    Relayed,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CandidateType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CandidateType::{}",
            match *self {
                Self::Host => "Host",
                Self::ServerReflexive => "ServerReflexive",
                Self::PeerReflexive => "PeerReflexive",
                Self::Relayed => "Relayed",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for CandidateType {
    type GlibType = ffi::NiceCandidateType;

    fn into_glib(self) -> ffi::NiceCandidateType {
        match self {
            Self::Host => ffi::NICE_CANDIDATE_TYPE_HOST,
            Self::ServerReflexive => ffi::NICE_CANDIDATE_TYPE_SERVER_REFLEXIVE,
            Self::PeerReflexive => ffi::NICE_CANDIDATE_TYPE_PEER_REFLEXIVE,
            Self::Relayed => ffi::NICE_CANDIDATE_TYPE_RELAYED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceCandidateType> for CandidateType {
    unsafe fn from_glib(value: ffi::NiceCandidateType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Host,
            1 => Self::ServerReflexive,
            2 => Self::PeerReflexive,
            3 => Self::Relayed,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceCompatibility")]
pub enum Compatibility {
    #[doc(alias = "NICE_COMPATIBILITY_RFC5245")]
    Rfc5245,
    #[doc(alias = "NICE_COMPATIBILITY_GOOGLE")]
    Google,
    #[doc(alias = "NICE_COMPATIBILITY_MSN")]
    Msn,
    #[doc(alias = "NICE_COMPATIBILITY_WLM2009")]
    Wlm2009,
    #[doc(alias = "NICE_COMPATIBILITY_OC2007")]
    Oc2007,
    #[doc(alias = "NICE_COMPATIBILITY_OC2007R2")]
    Oc2007r2,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Compatibility {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Compatibility::{}",
            match *self {
                Self::Rfc5245 => "Rfc5245",
                Self::Google => "Google",
                Self::Msn => "Msn",
                Self::Wlm2009 => "Wlm2009",
                Self::Oc2007 => "Oc2007",
                Self::Oc2007r2 => "Oc2007r2",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Compatibility {
    type GlibType = ffi::NiceCompatibility;

    fn into_glib(self) -> ffi::NiceCompatibility {
        match self {
            Self::Rfc5245 => ffi::NICE_COMPATIBILITY_RFC5245,
            Self::Google => ffi::NICE_COMPATIBILITY_GOOGLE,
            Self::Msn => ffi::NICE_COMPATIBILITY_MSN,
            Self::Wlm2009 => ffi::NICE_COMPATIBILITY_WLM2009,
            Self::Oc2007 => ffi::NICE_COMPATIBILITY_OC2007,
            Self::Oc2007r2 => ffi::NICE_COMPATIBILITY_OC2007R2,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceCompatibility> for Compatibility {
    unsafe fn from_glib(value: ffi::NiceCompatibility) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Rfc5245,
            1 => Self::Google,
            2 => Self::Msn,
            3 => Self::Wlm2009,
            4 => Self::Oc2007,
            5 => Self::Oc2007r2,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceComponentState")]
pub enum ComponentState {
    #[doc(alias = "NICE_COMPONENT_STATE_DISCONNECTED")]
    Disconnected,
    #[doc(alias = "NICE_COMPONENT_STATE_GATHERING")]
    Gathering,
    #[doc(alias = "NICE_COMPONENT_STATE_CONNECTING")]
    Connecting,
    #[doc(alias = "NICE_COMPONENT_STATE_CONNECTED")]
    Connected,
    #[doc(alias = "NICE_COMPONENT_STATE_READY")]
    Ready,
    #[doc(alias = "NICE_COMPONENT_STATE_FAILED")]
    Failed,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ComponentState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ComponentState::{}",
            match *self {
                Self::Disconnected => "Disconnected",
                Self::Gathering => "Gathering",
                Self::Connecting => "Connecting",
                Self::Connected => "Connected",
                Self::Ready => "Ready",
                Self::Failed => "Failed",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ComponentState {
    type GlibType = ffi::NiceComponentState;

    fn into_glib(self) -> ffi::NiceComponentState {
        match self {
            Self::Disconnected => ffi::NICE_COMPONENT_STATE_DISCONNECTED,
            Self::Gathering => ffi::NICE_COMPONENT_STATE_GATHERING,
            Self::Connecting => ffi::NICE_COMPONENT_STATE_CONNECTING,
            Self::Connected => ffi::NICE_COMPONENT_STATE_CONNECTED,
            Self::Ready => ffi::NICE_COMPONENT_STATE_READY,
            Self::Failed => ffi::NICE_COMPONENT_STATE_FAILED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceComponentState> for ComponentState {
    unsafe fn from_glib(value: ffi::NiceComponentState) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Disconnected,
            1 => Self::Gathering,
            2 => Self::Connecting,
            3 => Self::Connected,
            4 => Self::Ready,
            5 => Self::Failed,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceComponentType")]
pub enum ComponentType {
    #[doc(alias = "NICE_COMPONENT_TYPE_RTP")]
    Rtp,
    #[doc(alias = "NICE_COMPONENT_TYPE_RTCP")]
    Rtcp,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ComponentType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ComponentType::{}",
            match *self {
                Self::Rtp => "Rtp",
                Self::Rtcp => "Rtcp",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ComponentType {
    type GlibType = ffi::NiceComponentType;

    fn into_glib(self) -> ffi::NiceComponentType {
        match self {
            Self::Rtp => ffi::NICE_COMPONENT_TYPE_RTP,
            Self::Rtcp => ffi::NICE_COMPONENT_TYPE_RTCP,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceComponentType> for ComponentType {
    unsafe fn from_glib(value: ffi::NiceComponentType) -> Self {
        skip_assert_initialized!();
        match value {
            1 => Self::Rtp,
            2 => Self::Rtcp,
            value => Self::__Unknown(value),
        }
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceNominationMode")]
pub enum NominationMode {
    #[doc(alias = "NICE_NOMINATION_MODE_REGULAR")]
    Regular,
    #[doc(alias = "NICE_NOMINATION_MODE_AGGRESSIVE")]
    Aggressive,
    #[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
impl fmt::Display for NominationMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "NominationMode::{}",
            match *self {
                Self::Regular => "Regular",
                Self::Aggressive => "Aggressive",
                _ => "Unknown",
            }
        )
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl IntoGlib for NominationMode {
    type GlibType = ffi::NiceNominationMode;

    fn into_glib(self) -> ffi::NiceNominationMode {
        match self {
            Self::Regular => ffi::NICE_NOMINATION_MODE_REGULAR,
            Self::Aggressive => ffi::NICE_NOMINATION_MODE_AGGRESSIVE,
            Self::__Unknown(value) => value,
        }
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl FromGlib<ffi::NiceNominationMode> for NominationMode {
    unsafe fn from_glib(value: ffi::NiceNominationMode) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Regular,
            1 => Self::Aggressive,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceProxyType")]
pub enum ProxyType {
    #[doc(alias = "NICE_PROXY_TYPE_NONE")]
    None,
    #[doc(alias = "NICE_PROXY_TYPE_SOCKS5")]
    Socks5,
    #[doc(alias = "NICE_PROXY_TYPE_HTTP")]
    Http,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ProxyType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ProxyType::{}",
            match *self {
                Self::None => "None",
                Self::Socks5 => "Socks5",
                Self::Http => "Http",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for ProxyType {
    type GlibType = ffi::NiceProxyType;

    fn into_glib(self) -> ffi::NiceProxyType {
        match self {
            Self::None => ffi::NICE_PROXY_TYPE_NONE,
            Self::Socks5 => ffi::NICE_PROXY_TYPE_SOCKS5,
            Self::Http => ffi::NICE_PROXY_TYPE_HTTP,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceProxyType> for ProxyType {
    unsafe fn from_glib(value: ffi::NiceProxyType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::None,
            1 => Self::Socks5,
            2 => Self::Http,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "NiceRelayType")]
pub enum RelayType {
    #[doc(alias = "NICE_RELAY_TYPE_TURN_UDP")]
    Udp,
    #[doc(alias = "NICE_RELAY_TYPE_TURN_TCP")]
    Tcp,
    #[doc(alias = "NICE_RELAY_TYPE_TURN_TLS")]
    Tls,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for RelayType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "RelayType::{}",
            match *self {
                Self::Udp => "Udp",
                Self::Tcp => "Tcp",
                Self::Tls => "Tls",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for RelayType {
    type GlibType = ffi::NiceRelayType;

    fn into_glib(self) -> ffi::NiceRelayType {
        match self {
            Self::Udp => ffi::NICE_RELAY_TYPE_TURN_UDP,
            Self::Tcp => ffi::NICE_RELAY_TYPE_TURN_TCP,
            Self::Tls => ffi::NICE_RELAY_TYPE_TURN_TLS,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NiceRelayType> for RelayType {
    unsafe fn from_glib(value: ffi::NiceRelayType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Udp,
            1 => Self::Tcp,
            2 => Self::Tls,
            value => Self::__Unknown(value),
        }
    }
}
