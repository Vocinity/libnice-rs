// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{CandidateType};
use glib::{translate::*};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Candidate(Boxed<ffi::NiceCandidate>);

    match fn {
        copy => |ptr| ffi::nice_candidate_copy(ptr),
        free => |ptr| ffi::nice_candidate_free(ptr),
        type_ => || ffi::nice_candidate_get_type(),
    }
}

impl Candidate {
    #[doc(alias = "nice_candidate_new")]
    pub fn new(type_: CandidateType) -> Candidate {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::nice_candidate_new(type_.into_glib()))
        }
    }

    #[cfg(feature = "v0_1_15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
    #[doc(alias = "nice_candidate_equal_target")]
    pub fn equal_target(&self, candidate2: &Candidate) -> bool {
        unsafe {
            from_glib(ffi::nice_candidate_equal_target(self.to_glib_none().0, candidate2.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_1_19")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_19")))]
    //#[doc(alias = "nice_candidate_relay_address")]
    //pub fn relay_address(&self, addr: /*Ignored*/&mut Address) {
    //    unsafe { TODO: call ffi:nice_candidate_relay_address() }
    //}

    //#[cfg(feature = "v0_1_20")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_20")))]
    //#[doc(alias = "nice_candidate_stun_server_address")]
    //pub fn stun_server_address(&self, addr: /*Ignored*/&mut Address) -> bool {
    //    unsafe { TODO: call ffi:nice_candidate_stun_server_address() }
    //}
}

unsafe impl Send for Candidate {}
unsafe impl Sync for Candidate {}
