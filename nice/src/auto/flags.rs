// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
use bitflags::{bitflags};
#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
use glib::{translate::*,value::FromValue,value::ToValue,StaticType,Type};

#[cfg(feature = "v0_1_15")]
bitflags! {
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
    #[doc(alias = "NiceAgentOption")]
    pub struct AgentOption: u32 {
        #[doc(alias = "NICE_AGENT_OPTION_NONE")]
        const NONE = ffi::NICE_AGENT_OPTION_NONE as _;
        #[doc(alias = "NICE_AGENT_OPTION_REGULAR_NOMINATION")]
        const REGULAR_NOMINATION = ffi::NICE_AGENT_OPTION_REGULAR_NOMINATION as _;
        #[doc(alias = "NICE_AGENT_OPTION_RELIABLE")]
        const RELIABLE = ffi::NICE_AGENT_OPTION_RELIABLE as _;
        #[doc(alias = "NICE_AGENT_OPTION_LITE_MODE")]
        const LITE_MODE = ffi::NICE_AGENT_OPTION_LITE_MODE as _;
        #[doc(alias = "NICE_AGENT_OPTION_ICE_TRICKLE")]
        const ICE_TRICKLE = ffi::NICE_AGENT_OPTION_ICE_TRICKLE as _;
        #[doc(alias = "NICE_AGENT_OPTION_SUPPORT_RENOMINATION")]
        const SUPPORT_RENOMINATION = ffi::NICE_AGENT_OPTION_SUPPORT_RENOMINATION as _;
        #[doc(alias = "NICE_AGENT_OPTION_CONSENT_FRESHNESS")]
        const CONSENT_FRESHNESS = ffi::NICE_AGENT_OPTION_CONSENT_FRESHNESS as _;
        #[doc(alias = "NICE_AGENT_OPTION_BYTESTREAM_TCP")]
        const BYTESTREAM_TCP = ffi::NICE_AGENT_OPTION_BYTESTREAM_TCP as _;
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl IntoGlib for AgentOption {
    type GlibType = ffi::NiceAgentOption;

    #[inline]
    fn into_glib(self) -> ffi::NiceAgentOption {
        self.bits()
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl FromGlib<ffi::NiceAgentOption> for AgentOption {
    #[inline]
    unsafe fn from_glib(value: ffi::NiceAgentOption) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
impl StaticType for AgentOption {
    #[inline]
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nice_agent_option_get_type()) }
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
impl glib::HasParamSpec for AgentOption {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    |name| Self::ParamSpec::builder(name)
                }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
impl glib::value::ValueType for AgentOption {
    type Type = Self;
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
unsafe impl<'a> FromValue<'a> for AgentOption {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
impl ToValue for AgentOption {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
impl From<AgentOption> for glib::Value {
    #[inline]
    fn from(v: AgentOption) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

