// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
use bitflags::bitflags;
#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
use glib::translate::*;
#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
use std::fmt;

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
bitflags! {
    pub struct AgentOption: u32 {
        const NONE = 0;
        const REGULAR_NOMINATION = 1;
        const RELIABLE = 2;
        const LITE_MODE = 4;
        const ICE_TRICKLE = 8;
        const SUPPORT_RENOMINATION = 16;
        const CONSENT_FRESHNESS = 32;
        const BYTESTREAM_TCP = 64;
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
impl fmt::Display for AgentOption {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl IntoGlib for AgentOption {
    type GlibType = ffi::NiceAgentOption;

    fn into_glib(self) -> ffi::NiceAgentOption {
        self.bits()
    }
}

#[cfg(any(feature = "v0_1_15", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl FromGlib<ffi::NiceAgentOption> for AgentOption {
    unsafe fn from_glib(value: ffi::NiceAgentOption) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}
